# configuration = or-sequence 
#
# or-sequence  = (and-sequence/procedure-decl) *(1*CRLF (otherwise-directive / and-sequence / procedure-decl))
# and-sequence = *(directive CRLF)
#
# directive = ["NOT"] predicate / action / group-directive / or-directive
# group-directive = "{" or-sequence "}"
# 
# predicate =  <header> ":" <value>
#           / "$" <json-path> ":" <value>
#           / "NULL" <macro-expansion>
# 
# action = "CALL" <name>
#        / "DROP"
#        / "DRY"
#        / "EXIT"
#        / "LOG" <macro-string> ["&&"]; double ampersand in macro-string must be escaped
#        / "POST" <macro-token> ["INTO" $<json-path>] ["WITH" group-directive]; must expand to an absolute-URI
#        / "FOR" <variable> "IN" "$" <json-path> <group-directive>
#        / "REENTER [COPY]"
#        / "SET" <header> ":" <macro-string>
#        / "SET" "$"<json-path> ":"[type] <macro-string>
#
# procedure-decl      = "PROCEDURE" <name> group-directive
#
# or-directive        = "or" "{" 1*(directive CRLF) "}"
# otherwise-directive = "otherwise" directive
#
# macro-token     = *( macro-expand / macro-literal / macro-escape)
# macro-string    = *( macro-expand / macro-literal / macro-escape  / %x20); space allowed
# macro-expand     = ( "${" macro-expansion "}" )
# macro-escape     = "\\" / "\#" / "\$" / "\&"
# macro-literal    = %x21-22 / %x25-5B / %x5D-7E; visible characters except "#", "$", "\"
# macro-expansion  = 1*(ALPHA / DIGIT / "-" / "_" / ".")